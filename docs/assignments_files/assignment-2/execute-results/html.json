{
  "hash": "76afbec441bbc5927303f831dfe4b78d",
  "result": {
    "markdown": "---\ntitle: \"Assignment 2\"\nformat:\n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n### Question 1\n\n> *Using the filters on https://m.imdb.com/search, list all Turkish\n> movies with more than 2500 reviews, and save the URLs.*\n\n\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\nlibrary(ggplot2)\nlibrary(knitr)\nlibrary(reshape2)\n\nURL_1 <- \"https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nURL_2 <- \"https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_vector <- c(URL_1,URL_2)\n```\n\n\n### Question 2\n\n> *Start web scrapping to create a Data Frame with columns: Title, Year,\n> Duration, Rating, Votes*\n\n\n\n```{.r .cell-code}\nmovie_titles <- c()\nmovie_years <- c()\nmovie_durations <- c()\nmovie_ratings <- c()\nmovie_votes <- c()\n\nfor(url in url_vector){\n  HTML = read_html(url)\n  \n  title_names <- HTML %>% html_nodes('.ipc-title__text')\n  title_names <- html_text(title_names)\n  title_names <- tail(head(title_names,-1),-1)\n  title_names <- str_split(title_names, \" \", n=2)\n  title_names <- unlist(lapply(title_names, function(x) {x[2]}))\n  \n  year <- HTML %>% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\n  year <- html_text(year)\n  year <- substr(year, 1, 4)\n  year <- as.numeric(year)\n  \n  duration_trash <- HTML %>% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\n  duration_trash <- html_text(duration_trash)\n  duration <- c()\n  \n  for (string in duration_trash){\n  start_index <- 5\n  string_length <- str_length(string)\n\n  if(grepl(\"m\", string, fixed = TRUE)){\n    end_index <- regexpr(\"m\", string)\n    result <- substr(string, start_index, end_index)\n    duration <- append(duration,result)\n    }\n    \n  else{\n    end_index <- regexpr(\"h\", string)\n    result <- substr(string, start_index, end_index)\n    duration <- append(duration, result)\n    }\n  }\n    \n  \n  hour_duration <- str_split(duration, \" \")\n  hour_duration <- sapply(hour_duration, function(x) ifelse(grepl(\"h\", x[1], fixed = TRUE), x[1], 0))\n  hour_duration <- sub(\"h\", \"\", hour_duration)\n  hour_duration <- as.numeric(hour_duration)\n  hour_duration <- hour_duration * 60\n  \n  minute_duration <- str_split(duration, \" \")\n  minute_duration <- sapply(minute_duration, function(x) ifelse(length(x) >= 2, x[2], ifelse(grepl(\"m\", x, fixed = TRUE), x[1], ifelse(grepl(\"m\", x[1], fixed = TRUE), x[1],0))))\n  minute_duration <- sub(\"m\", \"\", minute_duration)\n  minute_duration <- as.numeric(minute_duration)\n  \n  rating <- HTML %>% html_nodes(\".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating\")\n  rating <- html_text(rating)\n  rating <- substr(rating, 1, 3)\n  rating <- as.numeric(rating)\n  \n  vote <- HTML %>% html_nodes(\".sc-53c98e73-0.kRnqtn\")\n  vote <- html_text(vote)\n  vote <- sub(\"Votes\", \"\" ,vote)\n  vote <- sub(\",\", \"\", vote)\n  vote <- as.numeric(vote)\n  \n  movie_titles <- append(movie_titles,title_names)\n  movie_years <- append(movie_years, year)\n  movie_durations <- append(movie_durations, hour_duration + minute_duration)\n  movie_ratings <- append(movie_ratings, rating)\n  movie_votes <- append(movie_votes, vote)\n  \n}\n\nmovies_df <- data.frame(movie_titles, movie_years, movie_durations, movie_ratings, movie_votes)\nkable(head(movies_df,10), caption = \"Movies Dataframe\")\n```\n\n::: {.cell-output-display}\nTable: Movies Dataframe\n\n|movie_titles              | movie_years| movie_durations| movie_ratings| movie_votes|\n|:-------------------------|-----------:|---------------:|-------------:|-----------:|\n|Kuru Otlar Üstüne         |        2023|             197|           8.1|        5044|\n|Istanbul Için Son Çagri   |        2023|              91|           5.3|        7310|\n|Yedinci Kogustaki Mucize  |        2019|             132|           8.2|       54142|\n|Ölümlü Dünya 2            |        2023|             117|           7.5|        3411|\n|Bihter                    |        2023|             113|           3.6|        3337|\n|Ölümlü Dünya              |        2018|             107|           7.6|       30246|\n|Kis Uykusu                |        2014|             196|           8.0|       54621|\n|Dag II                    |        2016|             135|           8.2|      109860|\n|Do Not Disturb            |        2023|             114|           6.3|        8762|\n|Ayla: The Daughter of War |        2017|             125|           8.3|       42986|\n:::\n\n\n### Question 3\n\n> a)  \n>\n>     > *Arrange your data frame in descending order by Rating. Present\n>     > the top 5 and bottom 5 movies based on user ratings. Have you\n>     > watched any of these movies? Do you agree or disagree with their\n>     > current IMDb Ratings?*\n\n\n\n```{.r .cell-code}\nmovies_df <- movies_df[order(movies_df$movie_ratings, decreasing = TRUE),]\n```\n\n\n##### Top 5 movies based on user ratings.\n\n\n\n```{.r .cell-code}\nkable(head(movies_df, 5), caption = \"Top 5 Movies Based On User Ratings.\")\n```\n\n::: {.cell-output-display}\nTable: Top 5 Movies Based On User Ratings.\n\n|    |movie_titles                 | movie_years| movie_durations| movie_ratings| movie_votes|\n|:---|:----------------------------|-----------:|---------------:|-------------:|-----------:|\n|257 |Hababam Sinifi               |        1975|              87|           9.2|       42509|\n|39  |CM101MMXI Fundamentals       |        2013|             139|           9.1|       46994|\n|273 |Tosun Pasa                   |        1976|              90|           8.9|       24325|\n|337 |Hababam Sinifi Sinifta Kaldi |        1975|              95|           8.9|       24367|\n|321 |Süt Kardesler                |        1976|              80|           8.8|       20883|\n:::\n\n\nI disagree with the top parts of this list created based on the scores\ngiven by the users. In my opinion, films are created by transferring\ncomments made on certain events, problems or situations to cinema.\nTherefore, I think that \"Yeşil Çam\" films are overrated too much, the\nemotions that are intended to be told in the films made by \"Yeşil Çam\"\nare unnecessary. There are much better directors today and much better\nfilms are being made, but they cannot get such high scores.\n\n##### Bottom 5 movies based on user ratings.\n\n\n\n```{.r .cell-code}\nkable(tail(movies_df, 5), caption = \"Bottom 5 Movies Based On User Ratings.\")\n```\n\n::: {.cell-output-display}\nTable: Bottom 5 Movies Based On User Ratings.\n\n|    |movie_titles                   | movie_years| movie_durations| movie_ratings| movie_votes|\n|:---|:------------------------------|-----------:|---------------:|-------------:|-----------:|\n|189 |Cumali Ceber 2                 |        2018|             100|           1.2|       10227|\n|199 |Müjde                          |        2022|              48|           1.2|        9920|\n|245 |15/07 Safak Vakti              |        2021|              95|           1.2|       20606|\n|101 |Cumali Ceber: Allah Seni Alsin |        2017|             100|           1.0|       39264|\n|150 |Reis                           |        2017|             108|           1.0|       73972|\n:::\n\n\nDefinitely I agree with the bottom part of this list but I can't explain\nwhy. :) :D\n\n> b)  \n>\n>     > *Check the ratings of 2-3 of your favorite movies. What are\n>     > their standings?*\n\n##### My top 10 list is below:\n\n1.  [Babam ve Oğlum](https://www.imdb.com/title/tt0476735/)\n2.  [Kabadayı](https://www.imdb.com/title/tt1051907/)\n3.  [Bizim Büyük Çaresizliğimiz](https://www.imdb.com/title/tt1309178/)\n4.  [Devrim Arabaları](https://www.imdb.com/title/tt1282139/)\n5.  [Recep İvedik 2](https://www.imdb.com/title/tt1373215/)\n6.  [G.O.R.A](https://www.imdb.com/title/tt0384116/)\n7.  [Kolpaçino](https://www.imdb.com/title/tt1523486)\n8.  [Av Mevsimi](https://www.imdb.com/title/tt1668191/)\n9.  [İşe Yarar Bir Şey](https://www.imdb.com/title/tt6214084)\n10. [Sen Aydınlatırsın Geceyi](https://www.imdb.com/title/tt2905772)\n\n*Note: This list is not ordered. Please don't judge me based on this\norder.* <br> *Note2: Yes! Recep İvedik 2 is still on the list of\nfunniest movies for me, additionally you can also find the [Onur\nÜnlü's](https://tr.wikipedia.org/wiki/Onur_%C3%9Cnl%C3%BC) comments\nabout Recep İvedik movies. [Interview\nhere.](https://www.youtube.com/watch?v=SxcO2d86OvE)*\n\n##### Let's check the ratings of \"Babam ve Oğlum\", \"Sen Aydınlatırsın Geceyi\" and \"İşe Yarar Bir Şey\".\n\n[**Babam ve Oğlum**]{style=\"background-color:yellow\"}\n\n\n\n```{.r .cell-code}\nkable(movies_df[movies_df$movie_titles == \"Babam ve Oglum\",], caption = \"Babam ve Oğlum\")\n```\n\n::: {.cell-output-display}\nTable: Babam ve Oğlum\n\n|    |movie_titles   | movie_years| movie_durations| movie_ratings| movie_votes|\n|:---|:--------------|-----------:|---------------:|-------------:|-----------:|\n|250 |Babam ve Oglum |        2005|             108|           8.2|       91016|\n:::\n\n```{.r .cell-code}\nsprintf(\"Rank of the *Babam ve Oğlum* is %d\", which(movies_df$movie_titles==\"Babam ve Oglum\"))\n```\n\n[1] \"Rank of the *Babam ve Oğlum* is 27\"\n\n\n[**İşe Yarar Bir Şey**]{style=\"background-color:yellow\"}\n\n\n\n```{.r .cell-code}\nkable(movies_df[movies_df$movie_titles == \"Ise Yarar Bir Sey\",], caption = \"İşe Yarar Bir Şey\")\n```\n\n::: {.cell-output-display}\nTable: İşe Yarar Bir Şey\n\n|   |movie_titles      | movie_years| movie_durations| movie_ratings| movie_votes|\n|:--|:-----------------|-----------:|---------------:|-------------:|-----------:|\n|94 |Ise Yarar Bir Sey |        2017|             104|           7.6|        5507|\n:::\n\n```{.r .cell-code}\nsprintf(\"Rank of the *İşe Yarar Bir Şey* is %d\", which(movies_df$movie_titles==\"Ise Yarar Bir Sey\"))\n```\n\n[1] \"Rank of the *İşe Yarar Bir Şey* is 85\"\n\n\n[**Sen Aydınlatırsın Geceyi**]{style=\"background-color:yellow\"}\n\n\n\n```{.r .cell-code}\nkable(movies_df[movies_df$movie_titles == \"Sen Aydinlatirsin Geceyi\",], caption = \"Sen Aydınlatırsın Geceyi\")\n```\n\n::: {.cell-output-display}\nTable: Sen Aydınlatırsın Geceyi\n\n|   |movie_titles             | movie_years| movie_durations| movie_ratings| movie_votes|\n|:--|:------------------------|-----------:|---------------:|-------------:|-----------:|\n|60 |Sen Aydinlatirsin Geceyi |        2013|             107|           7.7|       10483|\n:::\n\n```{.r .cell-code}\nsprintf(\"Rank of the *Sen Aydınlatırsın Geceyi* is %d\", which(movies_df$movie_titles==\"Sen Aydinlatirsin Geceyi\"))\n```\n\n[1] \"Rank of the *Sen Aydınlatırsın Geceyi* is 68\"\n\n\n> c)  \n>\n>     > *Considering that audience rating is a crucial indicator of\n>     > movie quality, what can* *you infer about the average ratings of\n>     > Turkish movies over the years? Calculate yearly* *rating\n>     > averages and plot them as a scatter plot. Similarly, plot the\n>     > number of* *movies over the years. You might observe that using\n>     > yearly averages could be misleading* *due to the increasing\n>     > number of movies each year. As an alternative solution,* *plot\n>     > box plots of ratings over the years (each year having a box plot\n>     > showing statistics* *about the ratings of movies in that year).\n>     > What insights do you gather from the box plot?*\n\nAverage Ratings vs Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_rating <- movies_df %>% group_by(movie_years) %>%\n  summarise(\n    average_rating = mean(movie_ratings),\n    .groups = \"drop\"\n  )\n\nyearly_rating_scatter_plot <- ggplot(yearly_rating, aes(x=movie_years, y=average_rating)) + geom_point()\nyearly_rating_scatter_plot\n```\n\n::: {.cell-output-display}\n![](assignment-2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nYear vs Rating boxplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_rating_box_plot <- ggplot(movies_df, aes(x=movie_years, y=movie_ratings, group=movie_years)) + geom_boxplot()\nyearly_rating_box_plot\n```\n\n::: {.cell-output-display}\n![](assignment-2_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nNumber of Movies vs Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_movie_count <- movies_df %>% group_by(movie_years) %>%\n  summarise(\n    number_of_movies = n(),\n    .groups = \"drop\"\n  )\n\nyarly_count_plot <- ggplot(yearly_movie_count, aes(x=movie_years, y=number_of_movies)) + geom_point()\nyarly_count_plot\n```\n\n::: {.cell-output-display}\n![](assignment-2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n> d)  \n>\n>     > *Do you believe there is a relationship between the number of\n>     > votes a movie received and its rating?* *Investigate the\n>     > correlation between Votes and Ratings.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorr_rating_vote = cor(movies_df$movie_ratings, movies_df$movie_votes)\ncorr_rating_vote\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.1307194\n```\n:::\n\n```{.r .cell-code}\nrating_vs_votes <- ggplot(movies_df, aes(x=movie_ratings, y=log(movie_votes))) + geom_point()\nrating_vs_votes\n```\n\n::: {.cell-output-display}\n![](assignment-2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n> e)  \n>\n>     > *Do you believe there is a relationship between a movie's\n>     > duration and its rating?* *Investigate the correlation between\n>     > Duration and Ratings.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorr_duration_rating = cor(movies_df$movie_durations, movies_df$movie_ratings)\ncorr_duration_rating\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.03343216\n```\n:::\n\n```{.r .cell-code}\nduration_vs_rating <- ggplot(movies_df, aes(x=movie_durations, y=movie_ratings)) + geom_point()\nduration_vs_rating\n```\n\n::: {.cell-output-display}\n![](assignment-2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n> f)  \n>\n>     > *Let's look a correlation heatmap*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrelation_df <- movies_df[, c(3,4,5)]\ncorrelation_df <- round(cor(correlation_df), 5)\n\ncorrelation_df_melted <- melt(correlation_df)\ncorrelation_plot <- ggplot(correlation_df_melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +\n  geom_text(aes(Var2, Var1, label = value), \n          color = \"white\", size = 4)\n\ncorrelation_plot\n```\n\n::: {.cell-output-display}\n![](assignment-2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Question 4\n\n> a)  \n>\n>     > *Use IMDb's Advanced Title Search interface with The Title Type\n>     > set to \"Movie\" only,* *the Country set to \"Turkey\" with the\n>     > option \"Search country of origin only\" active,* *and the Awards\n>     > & Recognation set to \"IMDB Top 1000\". You should find a total\n>     > of* *11 movies.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nURL_3 = \"https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250\"\nmovie_name <- c()\nmovie_year <- c()\n\nHTML = read_html(URL_3)\n\ntitle_names <- HTML %>% html_nodes('.ipc-title__text')\ntitle_names <- html_text(title_names)\ntitle_names <- tail(head(title_names,-1),-1)\ntitle_names <- str_split(title_names, \" \", n=2)\ntitle_names <- unlist(lapply(title_names, function(x) {x[2]}))\n\nyear <- HTML %>% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\nyear <- html_text(year)\nyear <- substr(year, 1, 4)\nyear <- as.numeric(year)\n\nmovie_name <- append(movie_name, title_names)\nmovie_year <- append(movie_year, year)\ntop1000_df <- data.frame(movie_name, movie_year)\nkable(top1000_df, caption = \"Turkish movies in IMDB Top1000 without rating, duration and votes\")\n```\n\n::: {.cell-output-display}\nTable: Turkish movies in IMDB Top1000 without rating, duration and votes\n\n|movie_name                | movie_year|\n|:-------------------------|----------:|\n|Yedinci Kogustaki Mucize  |       2019|\n|Kis Uykusu                |       2014|\n|Nefes: Vatan Sagolsun     |       2009|\n|Ayla: The Daughter of War |       2017|\n|Babam ve Oglum            |       2005|\n|Ahlat Agaci               |       2018|\n|Bir Zamanlar Anadolu'da   |       2011|\n|Eskiya                    |       1996|\n|G.O.R.A.                  |       2004|\n|Vizontele                 |       2001|\n|Her Sey Çok Güzel Olacak  |       1998|\n:::\n:::\n\n\n> b)  \n>\n>     > *Note that you now have a new data frame with Turkish movies in\n>     > the top 1000,* *containing only the title and year. Use your\n>     > initial data frame and an appropriate* *join operation to fill\n>     > in the duration, rating, and votes attributes of the new data\n>     > frame.*\n\nTop 1000 merged dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop1000_df_merged <- merge(x=top1000_df, y=movies_df,\n                           by.x=c(\"movie_name\", \"movie_year\"),\n                           by.y=c(\"movie_titles\", \"movie_years\"), all.x=TRUE)\nkable(top1000_df_merged, caption = \"Turkish movies in IMBD Top1000 with rating, duration and votes\")\n```\n\n::: {.cell-output-display}\nTable: Turkish movies in IMBD Top1000 with rating, duration and votes\n\n|movie_name                | movie_year| movie_durations| movie_ratings| movie_votes|\n|:-------------------------|----------:|---------------:|-------------:|-----------:|\n|Ahlat Agaci               |       2018|             188|           8.0|       26986|\n|Ayla: The Daughter of War |       2017|             125|           8.3|       42986|\n|Babam ve Oglum            |       2005|             108|           8.2|       91016|\n|Bir Zamanlar Anadolu'da   |       2011|             157|           7.8|       49344|\n|Eskiya                    |       1996|             128|           8.1|       71695|\n|G.O.R.A.                  |       2004|             127|           8.0|       66020|\n|Her Sey Çok Güzel Olacak  |       1998|             107|           8.1|       27113|\n|Kis Uykusu                |       2014|             196|           8.0|       54621|\n|Nefes: Vatan Sagolsun     |       2009|             128|           8.0|       35007|\n|Vizontele                 |       2001|             110|           8.0|       38396|\n|Yedinci Kogustaki Mucize  |       2019|             132|           8.2|       54142|\n:::\n:::\n\n\n> d)  \n>\n>     > *Order the 11 movies based on their Rank. Are these the same\n>     > first high-rated 11* *movies in your initial data frame? If yes,\n>     > does this imply that IMDb uses rankings* *alone to determine\n>     > their top 1000 movie list? If not, what does this imply?*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop1000_df_merged <- top1000_df_merged[order(top1000_df_merged$movie_ratings, decreasing = TRUE),]\nkable(top1000_df_merged, caption = \"Turkish movies in IMBD Top1000, ordered by rankings.\")\n```\n\n::: {.cell-output-display}\nTable: Turkish movies in IMBD Top1000, ordered by rankings.\n\n|   |movie_name                | movie_year| movie_durations| movie_ratings| movie_votes|\n|:--|:-------------------------|----------:|---------------:|-------------:|-----------:|\n|2  |Ayla: The Daughter of War |       2017|             125|           8.3|       42986|\n|3  |Babam ve Oglum            |       2005|             108|           8.2|       91016|\n|11 |Yedinci Kogustaki Mucize  |       2019|             132|           8.2|       54142|\n|5  |Eskiya                    |       1996|             128|           8.1|       71695|\n|7  |Her Sey Çok Güzel Olacak  |       1998|             107|           8.1|       27113|\n|1  |Ahlat Agaci               |       2018|             188|           8.0|       26986|\n|6  |G.O.R.A.                  |       2004|             127|           8.0|       66020|\n|8  |Kis Uykusu                |       2014|             196|           8.0|       54621|\n|9  |Nefes: Vatan Sagolsun     |       2009|             128|           8.0|       35007|\n|10 |Vizontele                 |       2001|             110|           8.0|       38396|\n|4  |Bir Zamanlar Anadolu'da   |       2011|             157|           7.8|       49344|\n:::\n:::\n\n\nLet's take a look at the movies dataframe, ordered by rankings.\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(movies_df,11), caption = \"Movies Dataframe\")\n```\n\n::: {.cell-output-display}\nTable: Movies Dataframe\n\n|    |movie_titles                 | movie_years| movie_durations| movie_ratings| movie_votes|\n|:---|:----------------------------|-----------:|---------------:|-------------:|-----------:|\n|257 |Hababam Sinifi               |        1975|              87|           9.2|       42509|\n|39  |CM101MMXI Fundamentals       |        2013|             139|           9.1|       46994|\n|273 |Tosun Pasa                   |        1976|              90|           8.9|       24325|\n|337 |Hababam Sinifi Sinifta Kaldi |        1975|              95|           8.9|       24367|\n|321 |Süt Kardesler                |        1976|              80|           8.8|       20883|\n|284 |Saban Oglu Saban             |        1977|              90|           8.7|       18533|\n|307 |Zügürt Aga                   |        1985|             101|           8.7|       16133|\n|317 |Neseli Günler                |        1978|              95|           8.7|       11804|\n|323 |Kibar Feyzo                  |        1978|              83|           8.7|       17124|\n|380 |Hababam Sinifi Uyaniyor      |        1976|              94|           8.7|       20638|\n|343 |Canim Kardesim               |        1973|              85|           8.6|       10093|\n:::\n:::\n\n\nClearly we can see that two dataframes above are not the same. We can say that IMDB not just use the rankings. First thing that I realized is there is not any movie created by before the 1996, so IMDb cares the creation date and older movies are not lucky in this ranking calculation.\n\n\n### for fun :D\n#### demirkubuz vs nbc\n\n![<>](https://pbs.twimg.com/media/EZF5eaGWsAA1g3U.jpg)\n![:D](https://buyutec.org/wp-content/uploads/2023/01/nuri-bilge-ceylan-bayilma-zeki-demirkubuz.jpg)\n",
    "supporting": [
      "assignment-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}