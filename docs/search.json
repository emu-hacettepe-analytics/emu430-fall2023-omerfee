[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the Team Safe İstanbul project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to https://emu-hacettepe-analytics.github.io/emu430-fall2023-team-team_safe_istanbul/.\nSummary\nOur objective is to compile a comprehensive report and identify the districts in Istanbul that are most susceptible to potential earthquakes. We aim to create an ordered priority list for neighborhoods and develop a risk map for Istanbul, taking geographical coordinates into account.\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab",
    "section": "",
    "text": "Hello! My name is Ömer.\nThis is my personal webpage for EMU430 - Data Analytics course from fall 2023-2024.\nYou can reach my personal website using this link.\nI am planning to use the web page whose link I provided above for my professional life. In the future, I intend to share articles on data science, machine learning, optimization, and analytical thinking on this page. In addition, I have been writing various essays on life, failure, the past-future relationship, and my observations for a long time. If I gather the courage one day, I also plan to share them here.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Question 1\n\nUsing the filters on https://m.imdb.com/search, list all Turkish movies with more than 2500 reviews, and save the URLs.\n\n\nShow the code\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\nlibrary(ggplot2)\nlibrary(knitr)\nlibrary(reshape2)\n\nURL_1 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nURL_2 &lt;- \"https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nurl_vector &lt;- c(URL_1,URL_2)\n\n\n\nQuestion 2\n\nStart web scrapping to create a Data Frame with columns: Title, Year, Duration, Rating, Votes\n\n\nShow the code\nmovie_titles &lt;- c()\nmovie_years &lt;- c()\nmovie_durations &lt;- c()\nmovie_ratings &lt;- c()\nmovie_votes &lt;- c()\n\nfor(url in url_vector){\n  HTML = read_html(url)\n  \n  title_names &lt;- HTML %&gt;% html_nodes('.ipc-title__text')\n  title_names &lt;- html_text(title_names)\n  title_names &lt;- tail(head(title_names,-1),-1)\n  title_names &lt;- str_split(title_names, \" \", n=2)\n  title_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n  \n  year &lt;- HTML %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\n  year &lt;- html_text(year)\n  year &lt;- substr(year, 1, 4)\n  year &lt;- as.numeric(year)\n  \n  duration_trash &lt;- HTML %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\n  duration_trash &lt;- html_text(duration_trash)\n  duration &lt;- c()\n  \n  for (string in duration_trash){\n  start_index &lt;- 5\n  string_length &lt;- str_length(string)\n\n  if(grepl(\"m\", string, fixed = TRUE)){\n    end_index &lt;- regexpr(\"m\", string)\n    result &lt;- substr(string, start_index, end_index)\n    duration &lt;- append(duration,result)\n    }\n    \n  else{\n    end_index &lt;- regexpr(\"h\", string)\n    result &lt;- substr(string, start_index, end_index)\n    duration &lt;- append(duration, result)\n    }\n  }\n    \n  \n  hour_duration &lt;- str_split(duration, \" \")\n  hour_duration &lt;- sapply(hour_duration, function(x) ifelse(grepl(\"h\", x[1], fixed = TRUE), x[1], 0))\n  hour_duration &lt;- sub(\"h\", \"\", hour_duration)\n  hour_duration &lt;- as.numeric(hour_duration)\n  hour_duration &lt;- hour_duration * 60\n  \n  minute_duration &lt;- str_split(duration, \" \")\n  minute_duration &lt;- sapply(minute_duration, function(x) ifelse(length(x) &gt;= 2, x[2], ifelse(grepl(\"m\", x, fixed = TRUE), x[1], ifelse(grepl(\"m\", x[1], fixed = TRUE), x[1],0))))\n  minute_duration &lt;- sub(\"m\", \"\", minute_duration)\n  minute_duration &lt;- as.numeric(minute_duration)\n  \n  rating &lt;- HTML %&gt;% html_nodes(\".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating\")\n  rating &lt;- html_text(rating)\n  rating &lt;- substr(rating, 1, 3)\n  rating &lt;- as.numeric(rating)\n  \n  vote &lt;- HTML %&gt;% html_nodes(\".sc-53c98e73-0.kRnqtn\")\n  vote &lt;- html_text(vote)\n  vote &lt;- sub(\"Votes\", \"\" ,vote)\n  vote &lt;- sub(\",\", \"\", vote)\n  vote &lt;- as.numeric(vote)\n  \n  movie_titles &lt;- append(movie_titles,title_names)\n  movie_years &lt;- append(movie_years, year)\n  movie_durations &lt;- append(movie_durations, hour_duration + minute_duration)\n  movie_ratings &lt;- append(movie_ratings, rating)\n  movie_votes &lt;- append(movie_votes, vote)\n  \n}\n\nmovies_df &lt;- data.frame(movie_titles, movie_years, movie_durations, movie_ratings, movie_votes)\nkable(head(movies_df,10), caption = \"Movies Dataframe\")\n\n\n\nMovies Dataframe\n\n\n\n\n\n\n\n\n\nmovie_titles\nmovie_years\nmovie_durations\nmovie_ratings\nmovie_votes\n\n\n\n\nIstanbul Için Son Çagri\n2023\n91\n5.4\n6961\n\n\nKuru Otlar Üstüne\n2023\n197\n8.1\n4905\n\n\nÖlümlü Dünya 2\n2023\n117\n7.5\n3020\n\n\nBihter\n2023\n113\n3.6\n3255\n\n\nÖlümlü Dünya\n2018\n107\n7.6\n30079\n\n\nYedinci Kogustaki Mucize\n2019\n132\n8.2\n54047\n\n\nDo Not Disturb\n2023\n114\n6.3\n8658\n\n\nKis Uykusu\n2014\n196\n8.0\n54566\n\n\nKurak Günler\n2022\n129\n7.6\n11079\n\n\nBir Zamanlar Anadolu’da\n2011\n157\n7.8\n49286\n\n\n\n\n\n\nQuestion 3\n\n\n\nArrange your data frame in descending order by Rating. Present the top 5 and bottom 5 movies based on user ratings. Have you watched any of these movies? Do you agree or disagree with their current IMDb Ratings?\n\n\n\n\nShow the code\nmovies_df &lt;- movies_df[order(movies_df$movie_ratings, decreasing = TRUE),]\n\n\nTop 5 movies based on user ratings.\n\nShow the code\nkable(head(movies_df, 5), caption = \"Top 5 Movies Based On User Ratings.\")\n\n\n\nTop 5 Movies Based On User Ratings.\n\n\n\n\n\n\n\n\n\n\n\nmovie_titles\nmovie_years\nmovie_durations\nmovie_ratings\nmovie_votes\n\n\n\n\n258\nHababam Sinifi\n1975\n87\n9.2\n42482\n\n\n33\nCM101MMXI Fundamentals\n2013\n139\n9.1\n46985\n\n\n287\nTosun Pasa\n1976\n90\n8.9\n24311\n\n\n327\nHababam Sinifi Sinifta Kaldi\n1975\n95\n8.9\n24348\n\n\n294\nSüt Kardesler\n1976\n80\n8.8\n20871\n\n\n\n\nI disagree with the top parts of this list created based on the scores given by the users. In my opinion, films are created by transferring comments made on certain events, problems or situations to cinema. Therefore, I think that “Yeşil Çam” films are overrated too much, the emotions that are intended to be told in the films made by “Yeşil Çam” are unnecessary. There are much better directors today and much better films are being made, but they cannot get such high scores.\n\n\nBottom 5 movies based on user ratings.\n\nShow the code\nkable(tail(movies_df, 5), caption = \"Bottom 5 Movies Based On User Ratings.\")\n\n\n\nBottom 5 Movies Based On User Ratings.\n\n\n\n\n\n\n\n\n\n\n\nmovie_titles\nmovie_years\nmovie_durations\nmovie_ratings\nmovie_votes\n\n\n\n\n158\nCumali Ceber 2\n2018\n100\n1.2\n10183\n\n\n243\nMüjde\n2022\n48\n1.2\n9881\n\n\n245\n15/07 Safak Vakti\n2021\n95\n1.2\n20603\n\n\n78\nReis\n2017\n108\n1.0\n73966\n\n\n214\nCumali Ceber: Allah Seni Alsin\n2017\n100\n1.0\n39263\n\n\n\n\nDefinitely I agree with the bottom part of this list but I can’t explain why. :) :D\n\n\n\nCheck the ratings of 2-3 of your favorite movies. What are their standings?\n\n\n\n\n\nMy top 10 list is below:\n\nBabam ve Oğlum\nKabadayı\nBizim Büyük Çaresizliğimiz\nDevrim Arabaları\nRecep İvedik 2\nG.O.R.A\nKolpaçino\nAv Mevsimi\nİşe Yarar Bir Şey\nSen Aydınlatırsın Geceyi\n\nNote: This list is not ordered. Please don’t judge me based on this order.  Note2: Yes! Recep İvedik 2 is still on the list of funniest movies for me, additionally you can also find the Onur Ünlü’s comments about Recep İvedik movies. Interview here.\n\n\nLet’s check the ratings of “Babam ve Oğlum”, “Sen Aydınlatırsın Geceyi” and “İşe Yarar Bir Şey”.\nBabam ve Oğlum\n\nShow the code\nkable(movies_df[movies_df$movie_titles == \"Babam ve Oglum\",], caption = \"Babam ve Oğlum\")\n\n\n\nBabam ve Oğlum\n\n\n\n\n\n\n\n\n\n\n\nmovie_titles\nmovie_years\nmovie_durations\nmovie_ratings\nmovie_votes\n\n\n\n\n249\nBabam ve Oglum\n2005\n108\n8.2\n90753\n\n\n\n\n\nShow the code\nsprintf(\"Rank of the *Babam ve Oğlum* is %d\", which(movies_df$movie_titles==\"Babam ve Oglum\"))\n\n[1] “Rank of the Babam ve Oğlum is 27”\nİşe Yarar Bir Şey\n\nShow the code\nkable(movies_df[movies_df$movie_titles == \"Ise Yarar Bir Sey\",], caption = \"İşe Yarar Bir Şey\")\n\n\n\nİşe Yarar Bir Şey\n\n\n\n\n\n\n\n\n\n\n\nmovie_titles\nmovie_years\nmovie_durations\nmovie_ratings\nmovie_votes\n\n\n\n\n74\nIse Yarar Bir Sey\n2017\n104\n7.6\n5495\n\n\n\n\n\nShow the code\nsprintf(\"Rank of the *İşe Yarar Bir Şey* is %d\", which(movies_df$movie_titles==\"Ise Yarar Bir Sey\"))\n\n[1] “Rank of the İşe Yarar Bir Şey is 85”\nSen Aydınlatırsın Geceyi\n\nShow the code\nkable(movies_df[movies_df$movie_titles == \"Sen Aydinlatirsin Geceyi\",], caption = \"Sen Aydınlatırsın Geceyi\")\n\n\n\nSen Aydınlatırsın Geceyi\n\n\n\n\n\n\n\n\n\n\n\nmovie_titles\nmovie_years\nmovie_durations\nmovie_ratings\nmovie_votes\n\n\n\n\n91\nSen Aydinlatirsin Geceyi\n2013\n107\n7.7\n10464\n\n\n\n\n\nShow the code\nsprintf(\"Rank of the *Sen Aydınlatırsın Geceyi* is %d\", which(movies_df$movie_titles==\"Sen Aydinlatirsin Geceyi\"))\n\n[1] “Rank of the Sen Aydınlatırsın Geceyi is 69”\n\n\n\nConsidering that audience rating is a crucial indicator of movie quality, what can you infer about the average ratings of Turkish movies over the years? Calculate yearly rating averages and plot them as a scatter plot. Similarly, plot the number of movies over the years. You might observe that using yearly averages could be misleading due to the increasing number of movies each year. As an alternative solution, plot box plots of ratings over the years (each year having a box plot showing statistics about the ratings of movies in that year). What insights do you gather from the box plot?\n\n\n\nAverage Ratings vs Year\n\n\nShow the code\nyearly_rating &lt;- movies_df %&gt;% group_by(movie_years) %&gt;%\n  summarise(\n    average_rating = mean(movie_ratings),\n    .groups = \"drop\"\n  )\n\nyearly_rating_scatter_plot &lt;- ggplot(yearly_rating, aes(x=movie_years, y=average_rating)) + geom_point()\nyearly_rating_scatter_plot\n\n\n\n\n\nYear vs Rating boxplot.\n\n\nShow the code\nyearly_rating_box_plot &lt;- ggplot(movies_df, aes(x=movie_years, y=movie_ratings, group=movie_years)) + geom_boxplot()\nyearly_rating_box_plot\n\n\n\n\n\nNumber of Movies vs Year\n\n\nShow the code\nyearly_movie_count &lt;- movies_df %&gt;% group_by(movie_years) %&gt;%\n  summarise(\n    number_of_movies = n(),\n    .groups = \"drop\"\n  )\n\nyarly_count_plot &lt;- ggplot(yearly_movie_count, aes(x=movie_years, y=number_of_movies)) + geom_point()\nyarly_count_plot\n\n\n\n\n\n\n\n\nDo you believe there is a relationship between the number of votes a movie received and its rating? Investigate the correlation between Votes and Ratings.\n\n\n\n\n\nShow the code\ncorr_rating_vote = cor(movies_df$movie_ratings, movies_df$movie_votes)\ncorr_rating_vote\n\n\n[1] 0.131057\n\n\n\n\n\nDo you believe there is a relationship between a movie’s duration and its rating? Investigate the correlation between Duration and Ratings.\n\n\n\n\n\nShow the code\ncorr_duration_rating = cor(movies_df$movie_durations, movies_df$movie_ratings)\ncorr_duration_rating\n\n\n[1] 0.03276498\n\n\n\n\n\nLet’s look a correlation heatmap\n\n\n\n\n\nShow the code\ncorrelation_df &lt;- movies_df[, c(3,4,5)]\ncorrelation_df &lt;- round(cor(correlation_df), 5)\n\ncorrelation_df_melted &lt;- melt(correlation_df)\ncorrelation_plot &lt;- ggplot(correlation_df_melted, aes(x=Var1, y=Var2, fill=value)) + geom_tile() +\n  geom_text(aes(Var2, Var1, label = value), \n          color = \"white\", size = 4)\n\ncorrelation_plot\n\n\n\n\n\n\n\n\nQuestion 4\n\n\n\nUse IMDb’s Advanced Title Search interface with The Title Type set to “Movie” only, the Country set to “Turkey” with the option “Search country of origin only” active, and the Awards & Recognation set to “IMDB Top 1000”. You should find a total of 11 movies.\n\n\n\n\n\nShow the code\nURL_3 = \"https://www.imdb.com/search/title/?title_type=feature&groups=top_1000&country_of_origin=TR&count=250\"\nmovie_name &lt;- c()\nmovie_year &lt;- c()\n\nHTML = read_html(URL_3)\n\ntitle_names &lt;- HTML %&gt;% html_nodes('.ipc-title__text')\ntitle_names &lt;- html_text(title_names)\ntitle_names &lt;- tail(head(title_names,-1),-1)\ntitle_names &lt;- str_split(title_names, \" \", n=2)\ntitle_names &lt;- unlist(lapply(title_names, function(x) {x[2]}))\n\nyear &lt;- HTML %&gt;% html_nodes(\".sc-43986a27-7.dBkaPT.dli-title-metadata\")\nyear &lt;- html_text(year)\nyear &lt;- substr(year, 1, 4)\nyear &lt;- as.numeric(year)\n\nmovie_name &lt;- append(movie_name, title_names)\nmovie_year &lt;- append(movie_year, year)\ntop1000_df &lt;- data.frame(movie_name, movie_year)\nkable(top1000_df, caption = \"Turkish movies in IMDB Top1000 without rating, duration and votes\")\n\n\n\nTurkish movies in IMDB Top1000 without rating, duration and votes\n\n\nmovie_name\nmovie_year\n\n\n\n\nYedinci Kogustaki Mucize\n2019\n\n\nKis Uykusu\n2014\n\n\nBir Zamanlar Anadolu’da\n2011\n\n\nNefes: Vatan Sagolsun\n2009\n\n\nAhlat Agaci\n2018\n\n\nBabam ve Oglum\n2005\n\n\nG.O.R.A.\n2004\n\n\nAyla: The Daughter of War\n2017\n\n\nEskiya\n1996\n\n\nVizontele\n2001\n\n\nHer Sey Çok Güzel Olacak\n1998\n\n\n\n\n\n\n\n\nNote that you now have a new data frame with Turkish movies in the top 1000, containing only the title and year. Use your initial data frame and an appropriate join operation to fill in the duration, rating, and votes attributes of the new data frame.\n\n\n\nTop 1000 merged dataframe\n\n\nShow the code\ntop1000_df_merged &lt;- merge(x=top1000_df, y=movies_df,\n                           by.x=c(\"movie_name\", \"movie_year\"),\n                           by.y=c(\"movie_titles\", \"movie_years\"), all.x=TRUE)\nkable(top1000_df_merged, caption = \"Turkish movies in IMBD Top1000 with rating, duration and votes\")\n\n\n\nTurkish movies in IMBD Top1000 with rating, duration and votes\n\n\n\n\n\n\n\n\n\nmovie_name\nmovie_year\nmovie_durations\nmovie_ratings\nmovie_votes\n\n\n\n\nAhlat Agaci\n2018\n188\n8.0\n26919\n\n\nAyla: The Daughter of War\n2017\n125\n8.3\n42927\n\n\nBabam ve Oglum\n2005\n108\n8.2\n90753\n\n\nBir Zamanlar Anadolu’da\n2011\n157\n7.8\n49286\n\n\nEskiya\n1996\n128\n8.1\n71671\n\n\nG.O.R.A.\n2004\n127\n8.0\n65971\n\n\nHer Sey Çok Güzel Olacak\n1998\n107\n8.1\n27087\n\n\nKis Uykusu\n2014\n196\n8.0\n54566\n\n\nNefes: Vatan Sagolsun\n2009\n128\n8.0\n34930\n\n\nVizontele\n2001\n110\n8.0\n38364\n\n\nYedinci Kogustaki Mucize\n2019\n132\n8.2\n54047\n\n\n\n\n\n\n\n\nOrder the 11 movies based on their Rank. Are these the same first high-rated 11 movies in your initial data frame? If yes, does this imply that IMDb uses rankings alone to determine their top 1000 movie list? If not, what does this imply?\n\n\n\n\n\nShow the code\ntop1000_df_merged &lt;- top1000_df_merged[order(top1000_df_merged$movie_ratings, decreasing = TRUE),]\nkable(top1000_df_merged, caption = \"Turkish movies in IMBD Top1000, ordered by rankings.\")\n\n\n\nTurkish movies in IMBD Top1000, ordered by rankings.\n\n\n\n\n\n\n\n\n\n\n\nmovie_name\nmovie_year\nmovie_durations\nmovie_ratings\nmovie_votes\n\n\n\n\n2\nAyla: The Daughter of War\n2017\n125\n8.3\n42927\n\n\n3\nBabam ve Oglum\n2005\n108\n8.2\n90753\n\n\n11\nYedinci Kogustaki Mucize\n2019\n132\n8.2\n54047\n\n\n5\nEskiya\n1996\n128\n8.1\n71671\n\n\n7\nHer Sey Çok Güzel Olacak\n1998\n107\n8.1\n27087\n\n\n1\nAhlat Agaci\n2018\n188\n8.0\n26919\n\n\n6\nG.O.R.A.\n2004\n127\n8.0\n65971\n\n\n8\nKis Uykusu\n2014\n196\n8.0\n54566\n\n\n9\nNefes: Vatan Sagolsun\n2009\n128\n8.0\n34930\n\n\n10\nVizontele\n2001\n110\n8.0\n38364\n\n\n4\nBir Zamanlar Anadolu’da\n2011\n157\n7.8\n49286\n\n\n\n\n\nLet’s take a look at the movies dataframe, ordered by rankings.\n\n\nShow the code\nkable(head(movies_df,11), caption = \"Movies Dataframe\")\n\n\n\nMovies Dataframe\n\n\n\n\n\n\n\n\n\n\n\nmovie_titles\nmovie_years\nmovie_durations\nmovie_ratings\nmovie_votes\n\n\n\n\n258\nHababam Sinifi\n1975\n87\n9.2\n42482\n\n\n33\nCM101MMXI Fundamentals\n2013\n139\n9.1\n46985\n\n\n287\nTosun Pasa\n1976\n90\n8.9\n24311\n\n\n327\nHababam Sinifi Sinifta Kaldi\n1975\n95\n8.9\n24348\n\n\n294\nSüt Kardesler\n1976\n80\n8.8\n20871\n\n\n299\nZügürt Aga\n1985\n101\n8.7\n16118\n\n\n300\nKibar Feyzo\n1978\n83\n8.7\n17114\n\n\n318\nSaban Oglu Saban\n1977\n90\n8.7\n18524\n\n\n348\nHababam Sinifi Uyaniyor\n1976\n94\n8.7\n20623\n\n\n354\nNeseli Günler\n1978\n95\n8.7\n11792\n\n\n311\nCanim Kardesim\n1973\n85\n8.6\n10081\n\n\n\n\n\nClearly we can see that two dataframes above are not the same. We can say that IMDB not just use the rankings. First thing that I realized is there is not any movie created by 1996, so IMDb cares the creation date and older movies are not lucky in this ranking calculation.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hey there! I’m Ömer Faruk Çiftçi, a fourth-year industrial engineering student diving headfirst into the world of data science. Currently donning the hat of an associate data scientist at Algopoly, I’m all about turning raw data into actionable insights. Balancing the world of academia and the startup hustle, I’m on a mission to apply my engineering skills to real-world problems. Let’s crunch some numbers and make sense of the data-driven chaos!\nYou can download my resume here."
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nAlgopoly, Associate Data Scientist, 2022 - Present"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nIntertech Information Technology and Marketing Inc, Business Analyst Intern, 2022\nAlgopoly, Data Science Intern, 2022\nGrispi, Product Management Intern, 2021\nAirmeet, Growth Marketing Intern, 2021"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the [term and year, e.g. Fall 2023] EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on DEC 19, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#a",
    "href": "assignments/assignment-1.html#a",
    "title": "Assignment 1",
    "section": "(a)",
    "text": "(a)\n\nTutorial\nThe tutorial outlines the process of building a blog with Quarto Pub from the ground up. It entails initiating a new project and directory within the RStudio IDE, conducting blog tests, and ultimately deploying it to the web through Quarto CLI. The author furnishes comprehensive, step-by-step guidance on publishing the blog to Quarto Pub. The tutorial wraps up with a prompt to explore additional resources at quarto-dot-org for a more in-depth understanding of utilizing Quarto as a computational notebook."
  },
  {
    "objectID": "assignments/assignment-1.html#b",
    "href": "assignments/assignment-1.html#b",
    "title": "Assignment 1",
    "section": "(b)",
    "text": "(b)\n\n3 Difference with Python and Posit\n\nPython and Posit (currently R) has different sytanx(the structure of statements in a computer language).\nfor loop example in Python:\nfor i in range(10):\n  print(i)\nfor loop example in R:\nfor (i in 0:9) {\n  print(i)\n}\nPython is an object-oriented programming language but R is a functional programming language.\nObject-Oriented Programming Language Python\nFunctional Programming Language R\nPython is a general-purpose programming language while R is a statistical programming language.\nArticle link is here."
  },
  {
    "objectID": "assignments/assignment-1.html#c",
    "href": "assignments/assignment-1.html#c",
    "title": "Assignment 1",
    "section": "(c)",
    "text": "(c)\n\nlibrary(dslabs)\ndata(na_example)\n\nprint(\"na_example data set:\")\n\n[1] \"na_example data set:\"\n\nna_example\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\nsprintf(\"Number of NAs in na_example data set. %d:\", sum(is.na(na_example)))\n\n[1] \"Number of NAs in na_example data set. 145:\"\n\nprint(\"Without NAs\")\n\n[1] \"Without NAs\"\n\ndata &lt;- na_example\ndata[is.na(data)] &lt;-0\ndata\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\nsprintf(\"Number of NAs in new dataset. %d:\", sum(is.na(data)))\n\n[1] \"Number of NAs in new dataset. 0:\""
  },
  {
    "objectID": "assignments/assignment-1.html#d",
    "href": "assignments/assignment-1.html#d",
    "title": "Assignment 1",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  }
]